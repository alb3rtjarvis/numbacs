import pytest
import numpy as np
from math import pi
from numbacs.flows import (get_interp_arrays_2D, get_interp_arrays_2D_steady,
                           get_interp_arrays_scalar, get_callable_2D, get_callable_scalar,
                           get_callable_linear_2D, get_callable_scalar_linear,
                           get_predefined_callable)

@pytest.fixture
def coords_2D():
    x = np.array([0.0, 0.5, 1.0])
    y = np.array([0.0, 0.5, 1.0])
    t = np.array([0.0, 0.1, 0.2])

    return t, x, y

@pytest.fixture
def coords_2D_steady():
    x = np.array([0.0, 0.5, 1.0])
    y = np.array([0.0, 0.5, 1.0])

    return x, y

@pytest.fixture
def pts_2D():
    xi = np.array([0.1,0.4,0.7])
    yi = np.array([0.1,0.4,0.7])
    ti = np.array([0.05, 0.12, 0.18])

    Ti,Xi,Yi = np.meshgrid(ti,xi,yi,indexing='ij')

    return np.column_stack((Ti.ravel(),Xi.ravel(),Yi.ravel()))

@pytest.fixture
def pts_2D_steady():
    x = np.array([0.1,0.4,0.7])
    y = np.array([0.1,0.4,0.7])

    return x, y

@pytest.fixture
def vel_2D(coords_2D):

    T,X,Y = np.meshgrid(*coords_2D,indexing='ij')
    u = np.sin(X)*np.cos(Y) + np.sin(T)
    v = np.cos(X)*np.sin(Y) + np.cos(T)

    return u,v

@pytest.fixture
def vel_2D_steady(coords_2D_steady):

    X,Y = np.meshgrid(*coords_2D_steady,indexing='ij')
    u = np.sin(X)*np.cos(Y)
    v = np.cos(X)*np.sin(Y)

    return u,v

@pytest.fixture
def scalar(coords_2D):

    T,X,Y = np.meshgrid(*coords_2D,indexing='ij')
    f = np.sin(X)*np.cos(Y) + np.sin(T)

    return f


def test_get_interp_arrays_2D(coords_2D,vel_2D):

    t, x, y = coords_2D
    u, v = vel_2D

    grid_expected = ((t[0],t[-1],len(t)), (x[0],x[-1],len(x)), (y[0],y[-1],len(y)))
    Cu_expected = np.array([[[-0.64380677, -0.60885335, -0.57389993, -0.3749727 ,-0.17604547],
                             [-0.10008279, -0.10008279, -0.10008279, -0.10008279,-0.10008279],
                             [ 0.44364119,  0.40868777,  0.37373435,  0.17480712,-0.02412012],
                             [ 0.79919871,  0.74138819,  0.68357768,  0.35456592,0.02555417],
                             [ 1.15475623,  1.07408862,  0.993421  ,  0.53432473,0.07522845]],

                            [[-0.54372398, -0.50877056, -0.47381714, -0.27488991,-0.07596267],
                             [ 0.        ,  0.        ,  0.        ,  0.        ,0.        ],
                             [ 0.54372398,  0.50877056,  0.47381714,  0.27488991,0.07596267],
                             [ 0.8992815 ,  0.84147098,  0.78366047,  0.45464871,0.12563696],
                             [ 1.25483902,  1.17417141,  1.0935038 ,  0.63440752,
                               0.17531124]],

                            [[-0.44364119, -0.40868777, -0.37373435, -0.17480712,0.02412012],
                             [ 0.10008279,  0.10008279,  0.10008279,  0.10008279,0.10008279],
                             [ 0.64380677,  0.60885335,  0.57389993,  0.3749727 ,0.17604547],
                             [ 0.99936429,  0.94155378,  0.88374326,  0.55473151,0.22571975],
                             [ 1.35492181,  1.2742542 ,  1.19358659,  0.73449031,0.27539403]],

                            [[-0.34505465, -0.31010123, -0.27514781, -0.07622058,0.12270666],
                             [ 0.19866933,  0.19866933,  0.19866933,  0.19866933,0.19866933],
                             [ 0.74239331,  0.70743989,  0.67248647,  0.47355924,0.274632  ],
                             [ 1.09795083,  1.04014032,  0.9823298 ,  0.65331804,0.32430629],
                             [ 1.45350835,  1.37284074,  1.29217313,  0.83307685,0.37398057]],

                            [[-0.24646811, -0.21151469, -0.17656127,  0.02236596,0.2212932 ],
                             [ 0.29725587,  0.29725587,  0.29725587,  0.29725587,0.29725587],
                             [ 0.84097985,  0.80602643,  0.77107301,  0.57214578,0.37321854],
                             [ 1.19653737,  1.13872685,  1.08091634,  0.75190458,0.42289283],
                             [ 1.55209489,  1.47142728,  1.39075967,  0.93166339,0.47256711]]])

    Cv_expected = np.array([[[0.45878642, 1.0025104 , 1.54623438, 1.9017919 , 2.25734942],
                             [0.49373983, 1.0025104 , 1.51128096, 1.84398138, 2.1766818 ],
                             [0.52869325, 1.0025104 , 1.47632754, 1.78617087, 2.09601419],
                             [0.72762049, 1.0025104 , 1.2774003 , 1.45715911, 1.63691792],
                             [0.92654772, 1.0025104 , 1.07847307, 1.12814735, 1.17782164]],

                            [[0.45627602, 1.        , 1.54372398, 1.8992815 , 2.25483902],
                             [0.49122944, 1.        , 1.50877056, 1.84147098, 2.17417141],
                             [0.52618286, 1.        , 1.47381714, 1.78366047, 2.0935038 ],
                             [0.72511009, 1.        , 1.27488991, 1.45464871, 1.63440752],
                             [0.92403733, 1.        , 1.07596267, 1.12563696, 1.17531124]],

                            [[0.45376562, 0.9974896 , 1.54121358, 1.8967711 , 2.25232862],
                             [0.48871904, 0.9974896 , 1.50626017, 1.83896059, 2.17166101],
                             [0.52367246, 0.9974896 , 1.47130675, 1.78115007, 2.0909934 ],
                             [0.7225997 , 0.9974896 , 1.27237951, 1.45213832, 1.63189712],
                             [0.92152693, 0.9974896 , 1.07345228, 1.12312656, 1.17280085]],

                            [[0.4363426 , 0.98006658, 1.52379056, 1.87934808, 2.2349056 ],
                             [0.47129602, 0.98006658, 1.48883714, 1.82153756, 2.15423799],
                             [0.50624944, 0.98006658, 1.45388372, 1.76372705, 2.07357037],
                             [0.70517667, 0.98006658, 1.25495649, 1.43471529, 1.6144741 ],
                             [0.9041039 , 0.98006658, 1.05602925, 1.10570354, 1.15537782]],

                            [[0.41891957, 0.96264355, 1.50636753, 1.86192505, 2.21748257],
                             [0.45387299, 0.96264355, 1.47141411, 1.80411454, 2.13681496],
                             [0.48882641, 0.96264355, 1.43646069, 1.74630402, 2.05614735],
                             [0.68775364, 0.96264355, 1.23753346, 1.41729227, 1.59705107],
                             [0.88668088, 0.96264355, 1.03860623, 1.08828051, 1.13795479]]])

    grid, Cu, Cv = get_interp_arrays_2D(t,x,y,u,v)

    assert np.allclose(grid_expected,grid)
    assert np.allclose(Cu_expected,Cu)
    assert np.allclose(Cv_expected,Cv)

def test_get_interp_arrays_2D_steady(coords_2D_steady,vel_2D_steady):

    x, y = coords_2D_steady
    u, v = vel_2D_steady

    grid_expected = ((x[0],x[-1],len(x)), (y[0],y[-1],len(y)))
    Cu_expected = np.array([[-0.54372398, -0.50877056, -0.47381714, -0.27488991, -0.07596267],
                            [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ],
                            [ 0.54372398,  0.50877056,  0.47381714,  0.27488991,  0.07596267],
                            [ 0.8992815 ,  0.84147098,  0.78366047,  0.45464871,  0.12563696],
                            [ 1.25483902,  1.17417141,  1.0935038 ,  0.63440752,  0.17531124]])

    Cv_expected = np.array([[-0.54372398,  0.        ,  0.54372398,  0.8992815 ,  1.25483902],
                            [-0.50877056,  0.        ,  0.50877056,  0.84147098,  1.17417141],
                            [-0.47381714,  0.        ,  0.47381714,  0.78366047,  1.0935038 ],
                            [-0.27488991,  0.        ,  0.27488991,  0.45464871,  0.63440752],
                            [-0.07596267,  0.        ,  0.07596267,  0.12563696,  0.17531124]])

    grid, Cu, Cv = get_interp_arrays_2D_steady(x,y,u,v)

    assert np.allclose(grid_expected,grid)
    assert np.allclose(Cu_expected,Cu)
    assert np.allclose(Cv_expected,Cv)


def test_get_interp_arrays_scalar(coords_2D,scalar):

    t, x, y = coords_2D
    f = scalar

    grid_expected = ((t[0],t[-1],len(t)), (x[0],x[-1],len(x)), (y[0],y[-1],len(y)))
    Cf_expected = np.array([[[-0.64380677, -0.60885335, -0.57389993, -0.3749727 ,-0.17604547],
                             [-0.10008279, -0.10008279, -0.10008279, -0.10008279,-0.10008279],
                             [ 0.44364119,  0.40868777,  0.37373435,  0.17480712,-0.02412012],
                             [ 0.79919871,  0.74138819,  0.68357768,  0.35456592,0.02555417],
                             [ 1.15475623,  1.07408862,  0.993421  ,  0.53432473,0.07522845]],

                            [[-0.54372398, -0.50877056, -0.47381714, -0.27488991,-0.07596267],
                             [ 0.        ,  0.        ,  0.        ,  0.        ,0.        ],
                             [ 0.54372398,  0.50877056,  0.47381714,  0.27488991,0.07596267],
                             [ 0.8992815 ,  0.84147098,  0.78366047,  0.45464871,0.12563696],
                             [ 1.25483902,  1.17417141,  1.0935038 ,  0.63440752,0.17531124]],

                            [[-0.44364119, -0.40868777, -0.37373435, -0.17480712,0.02412012],
                             [ 0.10008279,  0.10008279,  0.10008279,  0.10008279,0.10008279],
                             [ 0.64380677,  0.60885335,  0.57389993,  0.3749727 ,0.17604547],
                             [ 0.99936429,  0.94155378,  0.88374326,  0.55473151,0.22571975],
                             [ 1.35492181,  1.2742542 ,  1.19358659,  0.73449031,0.27539403]],

                            [[-0.34505465, -0.31010123, -0.27514781, -0.07622058,0.12270666],
                             [ 0.19866933,  0.19866933,  0.19866933,  0.19866933,0.19866933],
                             [ 0.74239331,  0.70743989,  0.67248647,  0.47355924,0.274632  ],
                             [ 1.09795083,  1.04014032,  0.9823298 ,  0.65331804,0.32430629],
                             [ 1.45350835,  1.37284074,  1.29217313,  0.83307685,0.37398057]],

                            [[-0.24646811, -0.21151469, -0.17656127,  0.02236596,0.2212932 ],
                             [ 0.29725587,  0.29725587,  0.29725587,  0.29725587,0.29725587],
                             [ 0.84097985,  0.80602643,  0.77107301,  0.57214578,0.37321854],
                             [ 1.19653737,  1.13872685,  1.08091634,  0.75190458,0.42289283],
                             [ 1.55209489,  1.47142728,  1.39075967,  0.93166339,0.47256711]]])


    grid, Cf = get_interp_arrays_scalar(t,x,y,f)

    assert np.allclose(grid_expected,grid)
    assert np.allclose(Cf_expected,Cf)

def test_get_callable_2D(coords_2D,pts_2D,vel_2D):

    t, x, y = coords_2D
    pts = pts_2D
    u, v = vel_2D

    grid, Cu, Cv = get_interp_arrays_2D(t, x, y, u, v)

    vel_func = get_callable_2D(grid, Cu, Cv)

    veli_expected = (np.array([0.15009104, 0.1431579 , 0.12749967, 0.43644747, 0.40967688,
                            0.3492165 , 0.67651718, 0.63311566, 0.53509497, 0.21975324,
                            0.2128201 , 0.19716187, 0.50610967, 0.47933907, 0.4188787 ,
                            0.74617937, 0.70277786, 0.60475716, 0.27903084, 0.27209771,
                            0.25643947, 0.56538727, 0.53861668, 0.4781563 , 0.80545698,
                            0.76205547, 0.66403477]),
                     np.array([1.09851494, 1.38487137, 1.62494107, 1.0915818 , 1.35810078,
                            1.58153956, 1.07592357, 1.2976404 , 1.48351887, 1.09281327,
                            1.3791697 , 1.61923941, 1.08588013, 1.35239911, 1.57583789,
                            1.0702219 , 1.29193873, 1.4778172 , 1.08361212, 1.36996854,
                            1.61003825, 1.07667898, 1.34319795, 1.56663674, 1.06102075,
                            1.28273758, 1.46861604]))

    veli = np.zeros((len(pts),2),np.float64)
    for k in range(len(pts)):
        veli[k,:] = vel_func(pts[k,:])

    veli = (veli[:,0],veli[:,1])

    assert np.allclose(veli_expected,veli)

def test_get_callable_scalar(coords_2D,pts_2D,scalar):

    t, x, y = coords_2D
    pts = pts_2D
    f = scalar

    grid, Cf = get_interp_arrays_scalar(t, x, y, f)

    f_func = get_callable_scalar(grid, Cf)

    fi_expected = np.array([0.15009104, 0.1431579 , 0.12749967, 0.43644747, 0.40967688,
                            0.3492165 , 0.67651718, 0.63311566, 0.53509497, 0.21975324,
                            0.2128201 , 0.19716187, 0.50610967, 0.47933907, 0.4188787 ,
                            0.74617937, 0.70277786, 0.60475716, 0.27903084, 0.27209771,
                            0.25643947, 0.56538727, 0.53861668, 0.4781563 , 0.80545698,
                            0.76205547, 0.66403477])

    fi = f_func(pts)

    assert np.allclose(fi_expected,fi)


def test_get_callable_linear_2D(coords_2D,pts_2D,vel_2D):

    t, x, y = coords_2D
    pts = pts_2D
    u, v = vel_2D

    grid = ((t[0],t[-1],len(t)), (x[0],x[-1],len(x)), (y[0],y[-1],len(y)))
    vel_func = get_callable_linear_2D(grid, u, v, return_type="tuple")

    veli_expected = (np.array([0.14345421, 0.13641141, 0.12112775, 0.42406673, 0.39589551,
                            0.33476086, 0.65887676, 0.61302577, 0.51352408, 0.21313811,
                            0.2060953 , 0.19081164, 0.49375062, 0.4655794 , 0.40444475,
                            0.72856065, 0.68270966, 0.58320797, 0.27243965, 0.26539685,
                            0.25011318, 0.55305217, 0.52488095, 0.4637463 , 0.7878622 ,
                            0.74201121, 0.64250952]),
                    np.array([1.09103959, 1.37165211, 1.60646214, 1.08399678, 1.34348088,
                           1.56061115, 1.06871312, 1.28234623, 1.46110945, 1.08555415,
                           1.36616667, 1.6009767 , 1.07851135, 1.33799545, 1.55512571,
                           1.06322768, 1.2768608 , 1.45562402, 1.0765916 , 1.35720412,
                           1.59201415, 1.0695488 , 1.3290329 , 1.54616316, 1.05426513,
                           1.26789824, 1.44666146]))

    veli = vel_func(pts)

    assert np.allclose(veli_expected,veli)

def test_get_callable_scalar_linear(coords_2D,pts_2D,scalar):

    t, x, y = coords_2D
    pts = pts_2D
    f = scalar

    grid = ((t[0],t[-1],len(t)), (x[0],x[-1],len(x)), (y[0],y[-1],len(y)))
    f_func = get_callable_scalar_linear(grid, f)

    fi_expected = np.array([0.14345421, 0.13641141, 0.12112775, 0.42406673, 0.39589551,
                            0.33476086, 0.65887676, 0.61302577, 0.51352408, 0.21313811,
                            0.2060953 , 0.19081164, 0.49375062, 0.4655794 , 0.40444475,
                            0.72856065, 0.68270966, 0.58320797, 0.27243965, 0.26539685,
                            0.25011318, 0.55305217, 0.52488095, 0.4637463 , 0.7878622 ,
                            0.74201121, 0.64250952]),

    fi = f_func(pts)

    assert np.allclose(fi_expected,fi)

def test_get_predefined_callable_dg(coords_2D,pts_2D):

    t, x, y = coords_2D
    pts = pts_2D

    domain_expected = ((0.,2.),(0.,1.))


    veli_expected = (np.array([-0.09099614, -0.02956644,  0.05623871, -0.28266661, -0.09184395,
             0.17469757, -0.24560208, -0.07980095,  0.15179043, -0.08912917,
            -0.02895982,  0.05508486, -0.280461  , -0.0911273 ,  0.17333443,
            -0.25082079, -0.08149661,  0.15501577, -0.08753067, -0.02844044,
             0.05409693, -0.27846781, -0.09047968,  0.17210257, -0.25508496,
            -0.08288213,  0.15765118]),
   np.array([0.09116166,  0.28056675,  0.23866433,  0.03115711,  0.09589172,
             0.08157037, -0.05502461, -0.16934834, -0.1440563 ,  0.08951955,
             0.27551284,  0.23436522,  0.03271667,  0.10069155,  0.08565335,
            -0.05215747, -0.16052419, -0.13655004,  0.08810724,  0.2711662 ,
             0.23066775,  0.03399481,  0.10462526,  0.08899956, -0.04969314,
            -0.15293975, -0.13009832]))

    vel_func, domain = get_predefined_callable('double_gyre', return_type='tuple')
    veli = vel_func(pts)

    assert np.allclose(domain_expected,domain)
    assert np.allclose(veli_expected,veli)

def test_get_predefined_callable_bickley(coords_2D,pts_2D):

    t, x, y = coords_2D
    pts = pts_2D

    domain_expected = ((0.0,pi*6371.0e-3),(-3.0,3.0))
    veli_expected = (np.array([5.67517316, 6.1925938 , 6.24710143, 5.66699745, 6.16189417,
            6.20017739, 5.64161864, 6.06659733, 6.05451725, 5.67202398,
            6.1807687 , 6.22902689, 5.67314128, 6.18496415, 6.23543959,
            5.65660624, 6.12287543, 6.14053768, 5.66528455, 6.15546229,
            6.19034633, 5.67432686, 6.18941597, 6.24224415, 5.66564775,
            6.15682609, 6.19243089]),
   np.array([0.0374318 ,  0.03569707,  0.03224042, -0.88726508, -0.84614607,
            -0.76421115, -1.75026599, -1.66915246, -1.50752329,  0.5227409 ,
             0.49851523,  0.45024247, -0.40721526, -0.38834346, -0.35073897,
            -1.3116217 , -1.2508365 , -1.12971415,  0.92829655,  0.88527599,
             0.799552  ,  0.01048154,  0.00999579,  0.00902787, -0.91324721,
            -0.8709241 , -0.78658984]))

    vel_func, domain = get_predefined_callable('bickley_jet', return_type='tuple')
    veli = vel_func(pts)

    assert np.allclose(domain_expected,domain)
    assert np.allclose(veli_expected,veli)

def test_get_predefined_callable_abc(coords_2D,pts_2D):

    x = np.array([0.0, 0.5, 1.0])
    y = np.array([0.0, 0.5, 1.0])
    z = np.array([0.0, 0.5, 1.0])
    t = np.array([0.0, 0.1, 0.2])
    Ti,Xi,Yi,Zi = np.meshgrid(t+0.1,x+0.1,y+0.1,z+0.1,indexing='ij')
    pts = np.column_stack((Ti.ravel(),Xi.ravel(),Yi.ravel(),Zi.ravel()))

    domain_expected = ((0.,2*pi),(0.,2*pi),(0.,2*pi))
    veli_expected = (np.array([1.16946323, 1.98171782, 2.5523905 , 0.99979468, 1.81204927,
            2.38272195, 0.62805518, 1.44030978, 2.01098246, 1.16946323,
            1.98171782, 2.5523905 , 0.99979468, 1.81204927, 2.38272195,
            0.62805518, 1.44030978, 2.01098246, 1.16946323, 1.98171782,
            2.5523905 , 0.99979468, 1.81204927, 2.38272195, 0.62805518,
            1.44030978, 2.01098246, 1.17378878, 2.00618247, 2.59100445,
            1.00412023, 1.83651392, 2.4213359 , 0.63238073, 1.46477443,
            2.0495964 , 1.17378878, 2.00618247, 2.59100445, 1.00412023,
            1.83651392, 2.4213359 , 0.63238073, 1.46477443, 2.0495964 ,
            1.17378878, 2.00618247, 2.59100445, 1.00412023, 1.83651392,
            2.4213359 , 0.63238073, 1.46477443, 2.0495964 , 1.18003575,
            2.04151442, 2.64677088, 1.0103672 , 1.87184587, 2.47710233,
            0.63862771, 1.50010638, 2.10536283, 1.18003575, 2.04151442,
            2.64677088, 1.0103672 , 1.87184587, 2.47710233, 0.63862771,
            1.50010638, 2.10536283, 1.18003575, 2.04151442, 2.64677088,
            1.0103672 , 1.87184587, 2.47710233, 0.63862771, 1.50010638,
            2.10536283]),
  np.array([1.8799572 , 1.8799572 , 1.8799572 , 1.58346113, 1.58346113,
            1.58346113, 0.93384575, 0.93384575, 0.93384575, 2.53729647,
            2.53729647, 2.53729647, 2.2408004 , 2.2408004 , 2.2408004 ,
            1.59118502, 1.59118502, 1.59118502, 2.99912896, 2.99912896,
            2.99912896, 2.70263289, 2.70263289, 2.70263289, 2.05301751,
            2.05301751, 2.05301751, 1.92306842, 1.92306842, 1.92306842,
            1.619221  , 1.619221  , 1.619221  , 0.95349901, 0.95349901,
            0.95349901, 2.58040769, 2.58040769, 2.58040769, 2.27656027,
            2.27656027, 2.27656027, 1.61083828, 1.61083828, 1.61083828,
            3.04224018, 3.04224018, 3.04224018, 2.73839276, 2.73839276,
            2.73839276, 2.07267077, 2.07267077, 2.07267077, 1.98532983,
            1.98532983, 1.98532983, 1.67086557, 1.67086557, 1.67086557,
            0.98188235, 0.98188235, 0.98188235, 2.6426691 , 2.6426691 ,
            2.6426691 , 2.32820484, 2.32820484, 2.32820484, 1.63922162,
            1.63922162, 1.63922162, 3.1045016 , 3.1045016 , 3.1045016 ,
            2.79003733, 2.79003733, 2.79003733, 2.10105411, 2.10105411,
            2.10105411]),
  np.array([1.5069818 , 1.5069818 , 1.5069818 , 1.73184329, 1.73184329,
            1.73184329, 1.53268915, 1.53268915, 1.53268915, 1.5069818 ,
            1.5069818 , 1.5069818 , 1.73184329, 1.73184329, 1.73184329,
            1.53268915, 1.53268915, 1.53268915, 1.5069818 , 1.5069818 ,
            1.5069818 , 1.73184329, 1.73184329, 1.73184329, 1.53268915,
            1.53268915, 1.53268915, 1.5069818 , 1.5069818 , 1.5069818 ,
            1.73184329, 1.73184329, 1.73184329, 1.53268915, 1.53268915,
            1.53268915, 1.5069818 , 1.5069818 , 1.5069818 , 1.73184329,
            1.73184329, 1.73184329, 1.53268915, 1.53268915, 1.53268915,
            1.5069818 , 1.5069818 , 1.5069818 , 1.73184329, 1.73184329,
            1.73184329, 1.53268915, 1.53268915, 1.53268915, 1.5069818 ,
            1.5069818 , 1.5069818 , 1.73184329, 1.73184329, 1.73184329,
            1.53268915, 1.53268915, 1.53268915, 1.5069818 , 1.5069818 ,
            1.5069818 , 1.73184329, 1.73184329, 1.73184329, 1.53268915,
            1.53268915, 1.53268915, 1.5069818 , 1.5069818 , 1.5069818 ,
            1.73184329, 1.73184329, 1.73184329, 1.53268915, 1.53268915,
            1.53268915]))

    vel_func, domain = get_predefined_callable('abc', return_type='tuple')
    veli = vel_func(pts)

    assert np.allclose(domain_expected,domain)
    assert np.allclose(veli_expected,veli)
