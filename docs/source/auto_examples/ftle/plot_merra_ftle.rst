
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/ftle/plot_merra_ftle.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_ftle_plot_merra_ftle.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_ftle_plot_merra_ftle.py:


MERRA-2 FTLE
============

Compute the FTLE field for atmospheric flow at time of Godzilla dust
storm using MERRA-2 data which is vertically averaged over pressure surfaces
ranging from 500hPa to 800hPa.

.. GENERATED FROM PYTHON SOURCE LINES 11-21

.. code-block:: Python


    # Author: ajarvis
    # Data: MERRA-2 - Global Modeling and Assimilation Office - NASA

    import numpy as np
    from math import copysign
    import matplotlib.pyplot as plt
    from numbacs.flows import get_interp_arrays_2D, get_flow_2D
    from numbacs.integration import flowmap_grid_2D
    from numbacs.diagnostics import ftle_grid_2D







.. GENERATED FROM PYTHON SOURCE LINES 22-30

Get flow data
--------------
Load in atmospheric velocity data, dates, and coordinates. Set domain for
FTLE computation and integration span. Create interpolant and retrieve flow.

.. note::
   Pandas is a simpler option for storing and manipulating dates but we use
   numpy here as Pandas is not a dependency.

.. GENERATED FROM PYTHON SOURCE LINES 30-51

.. code-block:: Python


    # load in atmospheric data
    dates = np.load('../data/merra_june2020/dates.npy')
    dt = (dates[1] - dates[0]).astype('timedelta64[h]').astype(int)
    t = np.arange(0,len(dates)*dt,dt,np.float64)
    lon = np.load('../data/merra_june2020/lon.npy')
    lat = np.load('../data/merra_june2020/lat.npy')

    # NumbaCS uses 'ij' indexing, most geophysical data uses 'xy'
    # indexing for the spatial coordintes. We need to switch axes and
    # scale by 3.6 since velocity data is in m/s and we want km/hr.
    u = np.moveaxis(np.load('../data/merra_june2020/u_500_800hPa.npy'),1,2)*3.6
    v = np.moveaxis(np.load('../data/merra_june2020/v_500_800hPa.npy'),1,2)*3.6
    nt,nx,ny = u.shape

    # set domain on which ftle will be computed
    dx = 0.15
    dy = 0.15
    lonf = np.arange(-100,35+dx,dx)
    latf = np.arange(-5,45+dy,dy)








.. GENERATED FROM PYTHON SOURCE LINES 52-53

set integration span and integration direction

.. GENERATED FROM PYTHON SOURCE LINES 53-67

.. code-block:: Python

    day = 16
    t0_date = np.datetime64("2020-06-{:02d}".format(day))
    t0 = t[np.nonzero(dates == t0_date)[0][0]]
    T = -72.0
    params = np.array([copysign(1,T)])

    # get interpolant arrays of velocity field
    grid_vel, C_eval_u, C_eval_v = get_interp_arrays_2D(t, lon, lat, u, v)

    # set integration direction and retrieve flow
    # set spherical = 1 since flow is on spherical domain and lon is from [-180,180)
    params = np.array([copysign(1,T)])
    funcptr = get_flow_2D(grid_vel, C_eval_u, C_eval_v, spherical=1)








.. GENERATED FROM PYTHON SOURCE LINES 68-71

Integrate
---------
Integrate grid of particles and return final positions.

.. GENERATED FROM PYTHON SOURCE LINES 71-73

.. code-block:: Python

    flowmap = flowmap_grid_2D(funcptr, t0, T, lonf, latf, params)








.. GENERATED FROM PYTHON SOURCE LINES 74-77

FTLE
----
Compute FTLE field from final particle positions.

.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: Python

    ftle = ftle_grid_2D(flowmap,T,dx,dy)








.. GENERATED FROM PYTHON SOURCE LINES 80-84

Plot
----
Plot the results. Using the cartopy package for plotting geophysical data is
advised but it is not a dependency so we simply use matplotlib.

.. GENERATED FROM PYTHON SOURCE LINES 84-91

.. code-block:: Python

    coastlines = np.load('../data/merra_june2020/coastlines.npy')
    fig,ax = plt.subplots(dpi=200)
    ax.scatter(coastlines[:,0],coastlines[:,1],1,'k',marker='.',edgecolors=None,linewidths=0)
    ax.contourf(lonf,latf,ftle.T,levels=80,zorder=0)
    ax.set_xlim([lonf[0],lonf[-1]])
    ax.set_ylim([latf[0],latf[-1]])
    ax.set_aspect('equal')
    plt.show()


.. image-sg:: /auto_examples/ftle/images/sphx_glr_plot_merra_ftle_001.png
   :alt: plot merra ftle
   :srcset: /auto_examples/ftle/images/sphx_glr_plot_merra_ftle_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.059 seconds)


.. _sphx_glr_download_auto_examples_ftle_plot_merra_ftle.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_merra_ftle.ipynb <plot_merra_ftle.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_merra_ftle.py <plot_merra_ftle.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_merra_ftle.zip <plot_merra_ftle.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
